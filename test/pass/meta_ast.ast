root phase RootPhase {
    passes {
        A
    }
};
pass A;

enum BasicType {
    prefix = BT,
    values {
        BT_int, BT_float, BT_bool
    }
};

enum BinOpEnum {
    prefix = BO,
    values {
        pow, div, mul, sub, add, or, and, le, leq, ge, geq, eq, neq
    }
};

enum MonOpEnum {
    prefix = MO,
    values {
        neg, not
    }
};

traversal FirstTrav {
    nodes {
        BinOp, MonOp
    }
};

traversal SecondTrav;
traversal ThirdTrav;

node BinOp {
    children {
        BinOp left,
        BinOp right
    }
};

node MonOp {
    children {
        Expr expr
    },
    attributes {
        construct MonOpEnum op
    }
};


node VarLet {
    children {
        Expr expr {
            construct
        }
    },
    attributes {
        string id
    }
};

node Var {
    attributes {
        string id
    }
};

node IfElse {
    children {
        Expr condition { construct, mandatory },
        Stmt trueblock { construct, mandatory },
        Stmt falseblock { construct, mandatory }
    }
};

root node For {
    children {
        Expr initexpr { construct, mandatory },
        Expr stepexpr { construct, mandatory },
        Expr boundexpr { construct, mandatory },
        Stmt blockexpr { construct, mandatory }
    },
    attributes {
        construct string id
    }
};

nodeset Expr {
    nodes {
        BinOp, MonOp
    }
};

nodeset Stmt {
    nodes {
        IfElse, For
    }
};
// vim: ft=ast
